import streamlit as st
import pandas as pd
from fpdf import FPDF
from io import BytesIO

# Helper to avoid Unicode crash
def safe_text(text):
    return str(text).encode("latin-1", "replace").decode("latin-1")

# PDF Generator with styled templates
def generate_pdf(template_choice, df):
    pdf = FPDF()
    pdf.add_page()

    # ===== HEADER STYLES =====
    if template_choice == "Modern":
        pdf.set_fill_color(0, 102, 204)  # Blue background
        pdf.set_text_color(255, 255, 255)  # White text
        pdf.set_font("Helvetica", "B", 18)
        pdf.cell(0, 15, "üè† Modern Real Estate Report", ln=True, align="C", fill=True)

    elif template_choice == "Classic":
        pdf.set_draw_color(0, 0, 0)  # Black border
        pdf.set_font("Helvetica", "B", 18)
        pdf.set_text_color(0, 0, 0)
        pdf.cell(0, 15, "üìú Classic Real Estate Report", ln=True, align="C", border=1)

    elif template_choice == "Minimal":
        pdf.set_font("Helvetica", "B", 18)
        pdf.set_text_color(100, 100, 100)
        pdf.cell(0, 15, "‚ú® Minimal Real Estate Report", ln=True, align="L")

    pdf.ln(10)

    # ===== TABLE HEADER =====
    pdf.set_font("Helvetica", "B", 12)
    pdf.set_fill_color(200, 200, 200)  # Grey background
    pdf.set_text_color(0, 0, 0)
    for col in df.columns:
        pdf.cell(40, 10, safe_text(col), 1, align="C", fill=True)
    pdf.ln()

    # ===== TABLE ROWS =====
    pdf.set_font("Helvetica", "", 11)
    pdf.set_text_color(50, 50, 50)

    row_fill = False
    for _, row in df.iterrows():
        for value in row:
            pdf.cell(40, 10, safe_text(value), 1, align="C", fill=row_fill)
        pdf.ln()
        row_fill = not row_fill  # Alternate row color

    # ===== FOOTER =====
    pdf.ln(10)
    pdf.set_font("Helvetica", "I", 10)
    pdf.set_text_color(150, 150, 150)
    pdf.cell(0, 10, "Generated by Real Estate Report Generator", align="C")

    # Return PDF bytes
    pdf_bytes = pdf.output(dest="S").encode("latin-1")
    return BytesIO(pdf_bytes)


# Streamlit UI
st.title("üè° Real Estate Report Generator")

uploaded_file = st.file_uploader("Upload a Real Estate CSV file", type=["csv"])

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.write("### Preview of Uploaded Data", df.head())

    template_choice = st.selectbox(
        "Choose a Report Template",
        ["Modern", "Classic", "Minimal"]
    )

    if st.button("Generate PDF Report"):
        pdf_file = generate_pdf(template_choice, df)
        filename = f"{template_choice.lower()}_report.pdf"
        st.download_button(
            label=f"‚¨áÔ∏è Download {template_choice} Report",
            data=pdf_file,
            file_name=filename,
            mime="application/pdf"
        )
