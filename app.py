import streamlit as st
import pandas as pd
from fpdf import FPDF
from io import BytesIO
from datetime import datetime

# Helper to safely encode text
def safe_text(text):
    return str(text).encode("latin-1", "replace").decode("latin-1")

# PDF generator function
def generate_pdf(template, df):
    pdf = FPDF()
    pdf.add_page()

    # ===== HEADER =====
    if template == "Modern":
        pdf.set_fill_color(0, 102, 204)
        pdf.set_text_color(255, 255, 255)
        pdf.set_font("Helvetica", "B", 16)
        pdf.cell(0, 12, safe_text("üè† Modern Real Estate Report"), ln=True, align="C", fill=True)
    elif template == "Classic":
        pdf.set_draw_color(0, 0, 0)
        pdf.set_text_color(0, 0, 0)
        pdf.set_font("Helvetica", "B", 16)
        pdf.cell(0, 12, safe_text("üìú Classic Real Estate Report"), ln=True, align="C", border=1)
    elif template == "Minimal":
        pdf.set_text_color(100, 100, 100)
        pdf.set_font("Helvetica", "B", 16)
        pdf.cell(0, 12, safe_text("‚ú® Minimal Real Estate Report"), ln=True, align="L")

    pdf.ln(10)

    # ===== SUMMARY =====
    if "Price" in df.columns:
        total_properties = len(df)
        avg_price = df["Price"].mean()
        max_price = df["Price"].max()
        min_price = df["Price"].min()

        pdf.set_font("Helvetica", "B", 14)
        pdf.cell(0, 10, "üìä Summary", ln=True)
        pdf.set_font("Helvetica", "", 12)
        pdf.cell(0, 8, f"Total Properties: {total_properties}", ln=True)
        pdf.cell(0, 8, f"Average Price: ${avg_price:,.2f}", ln=True)
        pdf.cell(0, 8, f"Highest Price: ${max_price:,.2f}", ln=True)
        pdf.cell(0, 8, f"Lowest Price: ${min_price:,.2f}", ln=True)
        pdf.ln(10)

    # ===== TABLE HEADER =====
    pdf.set_font("Helvetica", "B", 12)
    pdf.set_fill_color(200, 200, 200)
    pdf.set_text_color(0, 0, 0)
    for col in df.columns:
        pdf.cell(40, 10, safe_text(col), 1, align="C", fill=True)
    pdf.ln()

    # ===== TABLE ROWS =====
    pdf.set_font("Helvetica", "", 11)
    pdf.set_text_color(50, 50, 50)
    fill = False
    for _, row in df.iterrows():
        for value in row:
            pdf.cell(40, 10, safe_text(value), 1, align="C", fill=fill)
        pdf.ln()
        fill = not fill  # alternate row color

    # ===== FOOTER =====
    pdf.ln(10)
    pdf.set_font("Helvetica", "I", 10)
    pdf.set_text_color(150, 150, 150)
    pdf.cell(0, 10, "Generated by Real Estate Report Generator", align="C")

    # Return PDF bytes
    pdf_bytes = pdf.output(dest="S").encode("latin-1", "replace")
    return BytesIO(pdf_bytes)

# ===== STREAMLIT APP =====
st.title("üè° Real Estate Report Generator")

uploaded_file = st.file_uploader("Upload a Real Estate CSV file", type=["csv"])

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.write("### Preview of Uploaded Data")
    st.dataframe(df)

    template_choice = st.selectbox("Choose a Report Template", ["Modern", "Classic", "Minimal"])

    if st.button("Generate PDF Report"):
        pdf_file = generate_pdf(template_choice, df)
        filename = f"{template_choice.lower()}_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        st.download_button(
            label=f"üì• Download {template_choice} Report",
            data=pdf_file,
            file_name=filename,
            mime="application/pdf"
        )
